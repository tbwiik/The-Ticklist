//
//  TickListFunctionalityTests.swift
//  The TicklistTests
//
//  Created by Torbj√∏rn Wiik on 23/12/2023.
//  Tests partly generated by GPT-4

import XCTest
@testable import The_Ticklist

final class TickListFunctionalityTests: XCTestCase {
    
    let tick0 = Tick(name: "foo", region: "bar", dicipline: Dicipline.boulder, grade: "4a", rating: 3, logItems: [])
    let tick1 = Tick(name: "bar", region: "foo", dicipline: Dicipline.sport, grade: "3b", rating: 2, logItems: [])
    let tickNoAdd = Tick(name: "no", region: "raw", dicipline: Dicipline.ice, grade: "beef", rating: 1, logItems: [])
    var tickList: TickList! = nil

    override func setUpWithError() throws {
       tickList = TickList(ticks: [tick0, tick1])
    }

    func testInitWithDefaultValues() {
            let tickList = TickList()
            XCTAssertEqual(tickList.name, "New Ticklist")
            XCTAssertTrue(tickList.ticks.isEmpty)
        }

    func testInitWithCustomValues() {
        let customTicks = [tick0, tick1]
        tickList = TickList(name: "Custom List", ticks: customTicks)
        XCTAssertEqual(tickList.name, "Custom List")
        XCTAssertEqual(tickList.ticks, customTicks)
    }
    
    func testContainsTick() {
        XCTAssertTrue(tickList.containsTick(tick0))
        XCTAssertFalse(tickList.containsTick(tickNoAdd))
    }

    func testGetIndex() {
        XCTAssertEqual(tickList.getIndex(tick0), 0)
        XCTAssertNotEqual(tickList.getIndex(tick1), 0)
        XCTAssertNil(tickList.getIndex(tickNoAdd))
    }
    
    func testGetTick() {
        XCTAssertEqual(tickList.getTick(0), tick0)
        XCTAssertNotEqual(tickList.getTick(0), tick1)
        XCTAssertNil(tickList.getTick(100))
    }
    
    func testAddTick() {
        XCTAssertNotEqual(tickList.ticks, [tick0, tick1, tickNoAdd])
        tickList.add(tickNoAdd)
        XCTAssertEqual(tickList.ticks, [tick0, tick1, tickNoAdd])
    }
    
    func testAddDupTick() {
        let tick = Tick(name: "foo", region: "bar", dicipline: Dicipline.boulder, grade: "4a", rating: 1, logItems: [Tick.LogItem()])
        let tickDup = Tick(name: "foo", region: "bar", dicipline: Dicipline.boulder, grade: "5a", rating: 2, logItems: [Tick.LogItem()])
        
        var tickList = TickList(ticks: [tick])
        tickList.add(tickDup)
        
        XCTAssertEqual(tickList.ticks.count, 1)
        XCTAssertEqual(tickList.ticks[0].logItems.count, 2)
        XCTAssertEqual(tickList.ticks[0].grade, tick.grade, "Adding duplicate tick should keep original grade")
        XCTAssertEqual(tickList.ticks[0].rating, tick.rating, "Adding duplicate tick should keep original rating")
    }
    
    func testRemoveTick(){
        XCTAssertEqual(tickList.ticks.count, 2)
        tickList.remove(tick1)
        XCTAssertFalse(tickList.containsTick(tick1))
    }
}
